def print_setup_instructions():
    """
    Prints the SQL commands needed to set up the database schema in the
    Supabase SQL Editor.
    """
    print("Please run the following SQL commands in your Supabase project's SQL Editor:")
    print("Go to https://supabase.com/dashboard/project/_/sql")
    print("-" * 70)
    print("""
-- Enable the pgvector extension
CREATE EXTENSION IF NOT EXISTS vector;

-- Create the feedback table
CREATE TABLE IF NOT EXISTS customer_feedback (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    feedback_id SERIAL,
    customer_segment VARCHAR(50),
    feedback_text TEXT,
    rating INTEGER,
    feedback_date DATE,
    source_type VARCHAR(50),
    embedding vector(1536),
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create a function for semantic search
CREATE OR REPLACE FUNCTION match_feedback (
  query_embedding vector(1536),
  match_threshold float,
  match_count int
)
RETURNS TABLE (
  feedback_id integer,
  feedback_text text,
  customer_segment varchar(50),
  rating integer,
  feedback_date date,
  source_type varchar(50),
  similarity float
)
LANGUAGE sql STABLE AS $$
  select
    customer_feedback.feedback_id,
    customer_feedback.feedback_text,
    customer_feedback.customer_segment,
    customer_feedback.rating,
    customer_feedback.feedback_date,
    customer_feedback.source_type,
    1 - (customer_feedback.embedding <=> query_embedding) as similarity
  from customer_feedback
  where 1 - (customer_feedback.embedding <=> query_embedding) > match_threshold
  order by similarity desc
  limit match_count;
$$;
    """)
    print("-" * 70)
    print("After running these commands, the database will be ready.")

if __name__ == "__main__":
    print_setup_instructions()